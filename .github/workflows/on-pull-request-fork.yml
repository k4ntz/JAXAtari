# .github/workflows/on-pull-request-fork.yml
name: Fork PR Tests

on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited]

jobs:
  branch:
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check_branch.outputs.result }}
    steps:
      - name: Check if base branch is dev
        id: check_branch
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" != "dev" ]]; then
            echo "Base branch is not 'dev'. Exiting."
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "result=success" >> $GITHUB_OUTPUT
          fi
        shell: bash

  changed-files:
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check_files.outputs.result }}
      forbidden_changes: ${{ steps.check_files.outputs.forbidden_changes }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          fetch-depth: 0

      - name: Check if files are changed that should not be changed
        id: check_files
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr_head
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...pr_head || true)
          echo "$CHANGED_FILES" # debug
          FORBIDDEN_CHANGES=$(echo "$CHANGED_FILES" | grep -v '^src/jaxatari/games/' || true)
          if [[ -n "$FORBIDDEN_CHANGES" ]]; then
            echo "The following files were changed but should not be changed in a game update PR:"
            echo "$FORBIDDEN_CHANGES"
            echo "result=failure" >> $GITHUB_OUTPUT
            FORBIDDEN_CHANGES_B64=$(echo "$FORBIDDEN_CHANGES" | base64 -w 0)
            echo "forbidden_changes=$FORBIDDEN_CHANGES_B64" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "result=success" >> $GITHUB_OUTPUT
            echo "forbidden_changes=" >> $GITHUB_OUTPUT
          fi
        shell: bash

  prepare-matrix:
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      pr_head_sha: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          fetch-depth: 0 # Needed for git diff

      - name: Generate matrix for fork
        id: set-matrix
        run: |
          echo "PR is from a fork. Calculating diff between base and head."
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr_head
          CHANGED_GAME_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...pr_head | grep 'src/jaxatari/games/jax_.*\.py' || true)
          if [[ -n "$CHANGED_GAME_FILES" ]]; then
            CHANGED_GAMES=$(echo "$CHANGED_GAME_FILES" | sed -e 's|src/jaxatari/games/jax_||' | sed -e 's|\.py||' | jq -R . | jq -cs .)
          else
            CHANGED_GAMES="[]"
          fi
          echo $CHANGED_GAMES # debug
          echo "matrix=$CHANGED_GAMES" >> $GITHUB_OUTPUT
        shell: bash

  trigger:
    needs: prepare-matrix
    uses: ./.github/workflows/reusable-run-tests.yml
    with:
      game_matrix: ${{ needs.prepare-matrix.outputs.matrix }}
      pr_head_sha: ${{ needs.prepare-matrix.outputs.pr_head_sha }}

  report:
    needs: [branch, changed-files, trigger]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Print results
        run: |
          echo "Branch check result: ${{ needs.branch.outputs.result }}"
          echo "Changed files check result: ${{ needs.changed-files.outputs.result }}"
          if [[ "${{ needs.changed-files.outputs.result }}" == "failure" ]]; then
            echo "Forbidden changes (decoded):"
            echo "${{ needs.changed-files.outputs.forbidden_changes }}" | base64 -d
          fi

          echo "--- Test Results ---"
          outcomes='${{ needs.trigger.outputs.test_outcomes }}'
          reports='${{ needs.trigger.outputs.test_reports }}'

          if [[ -z "$outcomes" || "$outcomes" == "{}" ]]; then
            echo "No tests were run."
          else
            for game in $(echo "$outcomes" | jq -r 'keys[]'); do
              outcome=$(echo "$outcomes" | jq -r ".${game}")
              echo "Game: ${game}, Outcome: ${outcome}"
              if [[ "$outcome" == "failure" ]]; then
                echo "--- Test Report for ${game} ---"
                report_b64=$(echo "$reports" | jq -r ".${game}")
                echo "$report_b64" | base64 -d
                echo "--- End Report for ${game} ---"
              fi
            done
          fi
        shell: bash
