name: Dynamic Tests

on:
  push:
  pull_request:

jobs:
  # This job scans the repository for specific files and prepares a matrix for the next job.
  scan-games:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      # The output 'matrix' will contain a JSON array of games.
      # This will be consumed by the strategy of the next job.
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate matrix of changed game files
        id: set-matrix
        run: |
          git fetch origin ${{ github.base_ref }}

          # Get the list of changed files and filter for games
          CHANGED_GAMES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep 'src/jaxatari/games/jax_.*\.py' | sed -e 's|src/jaxatari/games/jax_||' -e 's|\.py$||' | jq -R . | jq -cs .)

          # Debug print
          echo "Changed games: $CHANGED_GAMES"

          # Set the output for the job
          echo "matrix=${CHANGED_GAMES}" >> $GITHUB_OUTPUT

  scan-all-games:
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate matrix of all game files
        id: set-matrix
        run: |
          cd src/jaxatari/games/
          GAME_MATRIX=$(find . -type f -name "jax_*.py" -printf "%f\n" | sed -e 's/^jax_//' -e 's/\.py$//' | jq -R . | jq -cs .)

          # Debug print
          find . -type f -name "jax_*.py" -printf "%f\n" | sed -e 's/^jax_//' -e 's/\.py$//' | jq -R . | jq -s .

          echo "matrix=${GAME_MATRIX}" >> $GITHUB_OUTPUT

  # This job runs a set of steps for each file found by the 'scan-games' job.
  run-tests:
    needs: [scan-games, scan-all-games]
    if: always() && (needs.scan-games.result == 'success' || needs.scan-all-games.result == 'success')
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # 'fromJSON' parses the JSON string output from the 'scan-games' job.
        # It creates a matrix variable 'game' for each item in the array.
        game: ${{ fromJSON(needs.scan-games.outputs.matrix || needs.scan-all-games.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Create venv & install package
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e ".[gh_ci]"
        shell: bash

      - name: Run tests
        run: |
          echo "Running tests for game: ${{ matrix.game }}"

          . .venv/bin/activate
          pytest --game ${{ matrix.game }} --snapshot-warn-unused --tb=line -ra --color=yes
        shell: bash
